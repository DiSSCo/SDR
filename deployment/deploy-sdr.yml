- hosts: [galaxyservers, remoteservers]
  become: true
  become_user: root
  vars_files:
    - group_vars/galaxyservers.yml
    - group_vars/secret.yml
    - group_vars/locations.yml
  tasks:
    - name: Set local or remote SDR
      set_fact:
        use_local: false
    
    - name: Checkout SDR
      ansible.builtin.git:
        repo: 'https://github.com/DiSSCo/SDR.git'
        dest: '{{ sdr_root }}'
        version: 'main'
      when: not use_local

    - name: Local copy SDR tools
      copy:
        src: '{{ local_sdr_tools }}'
        dest: '{{ sdr_tools }}'
        force: yes
        owner: '{{ owner }}'
        group: '{{ group }}'
        mode: '{{ mode }}'
      when: use_local

    - name: Install SDR python dependencies
      pip:
        requirements: "{{ sdr_requirements_file }}"
        extra_args: "--index-url https://wheels.galaxyproject.org/simple/ --extra-index-url https://pypi.python.org/simple {{ pip_extra_args | default('') }}"
        virtualenv: "{{ galaxy_root }}/venv"
        virtualenv_command: "{{ pip_virtualenv_command }}"
      environment:
        PYTHONPATH: null
        VIRTUAL_ENV: "{{ galaxy_root }}/venv"

    - name: Find all SDR tools
      find:
        paths: '{{ sdr_tools }}'
        patterns: '*.xml'
        #patterns: 'create_opends.xml'
        excludes: ['sdr-*', 'macro*']
        recurse: yes
      register: glob_sdr_tools

    - name: Check syntax of SDR tools
      command: planemo lint --fail_level error --report_level warn '{{ item }}'
      loop: "{{ glob_sdr_tools.files | map(attribute='path') | list }}"
      loop_control:
        label: "Checking {{ item }}"
      register: sdrlint
    - name: Print Syntax check output
      debug:
        msg: '{{ item.stdout_lines }}'
      loop: '{{ sdrlint.results }}'
      loop_control:
        label: ""

    # - name: Test SDR tools
    #   command: planemo test '{{ item }}'
    #   loop: "{{ glob_sdr_tools.files | map(attribute='path') | list }}"
    #   loop_control:
    #     label: "Testing {{ item }}"
    #   register: sdrlint
    # - name: Print test output
    #   debug:
    #     msg: '{{ item.stdout_lines }}'
    #   loop: '{{ sdrlint.results }}'
    #   loop_control:
    #     label: ""

    - name: Copy SDR tools to galaxy tools folder
      copy:
        src: '{{ sdr_tools }}'
        dest: '{{ galaxy_tools }}'
        remote_src: yes
        force: yes
        owner: '{{ owner }}'
        group: '{{ group }}'
        mode: '{{ mode }}'
    - name: Copy SDR config to galaxy 
      copy:
        src: '{{ item }}'
        dest: '{{ galaxy_config }}'
        remote_src: yes
        force: yes
        owner: '{{ owner }}'
        group: '{{ group }}'
        mode: '{{ mode }}'
      loop:
        # Main server config (performed using template by ansible)
        #- '{{ sdr_config }}/galaxy.yml'
        # Tool panel config
        - '{{ sdr_config }}/integrated_tool_panel.xml'
        # SDR config
        - '{{ sdr_config }}/tool_conf.xml'
        - '{{ sdr_config }}/sdr_tool_conf.xml'
        - '{{ sdr_config }}/job_conf.xml'
        - '{{ sdr_config }}/local_env.sh'
        - '{{ sdr_config }}/opends-schema.json'
        # Data type config
        - '{{ sdr_config }}/datatypes_conf.xml'

    - name: Create directories
      file:
        path: '{{ item }}'
        state: directory
        owner: '{{ owner }}'
        group: '{{ group }}'
        mode: '{{ mode }}'
      loop:
        - '{{ galaxy_images }}'
        - '{{ galaxy_vis }}'
        - '{{ galaxy_results }}'

    - name: Copy visualisations
      copy:
        src: '{{ sdr_vis }}' 
        dest: '{{ galaxy_vis }}'
        remote_src: yes
        force: yes
        owner: '{{ owner }}'
        group: '{{ group }}'
        mode: '{{ mode }}'
    - name: Copy static
      copy:
        src: '{{ sdr_static }}'
        dest: '{{ galaxy_static }}'
        remote_src: yes
        force: yes
        owner: '{{ owner }}'
        group: '{{ group }}'
        mode: '{{ mode }}'
    - name: Copy welcome page
      copy:
        src: '{{ sdr_static }}/welcome.html'
        dest: '{{ galaxy_static }}/welcome.html.sdr'
        remote_src: yes
        force: yes
        owner: '{{ owner }}'
        group: '{{ group }}'
        mode: '{{ mode }}'
    - name: Restart galaxy
      ansible.builtin.systemd:
        state: restarted
        #daemon_reload: yes # unneeded unless config changes
        name: galaxy

