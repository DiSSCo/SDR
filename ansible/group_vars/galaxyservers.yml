# Python 3 support
pip_virtualenv_command: /usr/bin/python3 -m virtualenv # usegalaxy_eu.certbot, usegalaxy_eu.tiaas2, galaxyproject.galaxy
certbot_virtualenv_package_name: python3-virtualenv    # usegalaxy_eu.certbot
pip_package: python3-pip                               # geerlingguy.pip
pip_install_packages: ['planemo', 'docker', 'rocrate', 'bioblend', 'numpy', 'pandas']

# PostgreSQL
postgresql_objects_users:
  - name: galaxy
postgresql_objects_databases:
  - name: galaxy
    owner: galaxy
# PostgreSQL Backups
#postgresql_backup_dir: /data/backups
#postgresql_backup_local_dir: "{{ '~postgres' | expanduser }}/backups"

# Galaxy
galaxy_create_user: true
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_images: '{{ galaxy_root }}/images'
galaxy_user: {name: galaxy, shell: /bin/bash}
galaxy_commit_id: release_22.05
galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: 4.7.12
miniconda_manage_dependencies: false

galaxy_config:
  galaxy:
    master_api_key: "{{ master_api_key }}"
    brand: "{{ sdr_conf_brand }}"
    admin_users: "{{ sdr_conf_admin_users }}"
    require_login: true
    allow_user_creation: true
    allow_user_deletion: false
    x_frame_options: SAMEORIGIN
  
    database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
    file_path: /data
    check_migrate_tools: false
    
    tool_data_path: "{{ galaxy_mutable_data_dir }}/tool-data"
    object_store_store_by: uuid
    id_secret: "{{ vault_id_secret }}"

    job_config_file: "{{ galaxy_config_dir }}/job_conf.xml"
    tool_config_file: "{{ galaxy_config_dir }}/tool_conf.xml"
    
    # SQL Performance
    database_engine_option_server_side_cursors: true
    slow_query_log_threshold: 5
    enable_per_request_sql_debugging: true
    
    # # File serving Performance
    ## nginx_x_accel_redirect_base: /_x_accel_redirect ## 502
    
    # Automation / Ease of Use / User-facing features
    watch_job_rules: 'auto'
    allow_path_paste: true
    enable_quotas: true
    show_welcome_with_login: false
    expose_user_name: true
    expose_dataset_path: true
    expose_potentially_sensitive_job_metrics: true
    
    # NFS workarounds
    retry_job_output_collection: 3
    
    # Debugging
    cleanup_job: onsuccess
    allow_user_impersonation: true
    
    # Tool security
    ## outputs_to_working_directory: true ## 502

  gravity:
    galaxy_root: "{{ galaxy_root }}/server"
    app_server: gunicorn
    gunicorn:
      # listening options
      bind: "unix:{{ galaxy_mutable_config_dir }}/gunicorn.sock"
      # performance options
      workers: 2
      # Other options that will be passed to gunicorn
      extra_args: '--forwarded-allow-ips="*"'
      preload: true
    celery:
      concurrency: 2
      loglevel: DEBUG
    handlers:
      handler:
        processes: 3
        pools:
          - job-handler
          - workflow-scheduler
   
galaxy_config_templates:
  - src: templates/galaxy/config/job_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.job_config_file }}"
  - src: templates/galaxy/config/tool_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.tool_config_file }}"

# systemd
galaxy_manage_systemd: true

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - galaxy
nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 1g

ssl_certificate: &ssl_cert /etc/ssl/certs/wildcard.crt
ssl_certificate_key: &ssl_key /etc/ssl/private/wildcard.key

# TUSD
tusd_instances:
  - name: uploads
    # user that tusd will run as
    user: root
    # group that tusd will run as
    group: root
    # args passed to tusd
    args:
      - "-host=localhost"
      - "-port=1080"
      - "-upload-dir=/srv/galaxy/var/tmp"
      - "-hooks-http=https://{{inventory_hostname}}/api/upload/hooks"
      - "-hooks-http-forward-headers=X-Api-Key,Cookie"
      - "-tls-certificate=*ssl_cert"
      - "-tls-key=*ssl_key"
